enum Type
    HELLO                     = 0x00
    HELLO_ACK                 = 0x01
    HELLO_TO                  = 0x02
    HELLO_TO_ACK              = 0x03
    QUERY_DID                 = 0x08
    QUERY_DID_ACK             = 0x09
    DEV_LGN                   = 0x10
    DEV_LGN_ACK               = 0x11
    DEV_LGN_CRC               = 0x12
    DEV_LGN_ACK_CRC           = 0x13
    DEV_LGN_KEY               = 0x14
    DEV_LGN_ACK_KEY           = 0x15
    DEV_LGN_DSK               = 0x16
    DEV_ONLINE_REQ            = 0x18
    DEV_ONLINE_REQ_ACK        = 0x19
    P2P_REQ                   = 0x20
    P2P_REQ_ACK               = 0x21
    P2P_REQ_DSK               = 0x26
    LAN_SEARCH                = 0x30
    LAN_NOTIFY                = 0x31
    LAN_NOTIFY_ACK            = 0x32
    PUNCH_TO                  = 0x40
    PUNCH_PKT                 = 0x41
    PUNCH_PKT_EX              = 0x41
    P2P_RDY                   = 0x42
    P2P_RDY_EX                = 0x42
    P2P_RDY_ACK               = 0x43
    RS_LGN                    = 0x60
    RS_LGN_ACK                = 0x61
    RS_LGN1                   = 0x62
    RS_LGN1_ACK               = 0x63
    LIST_REQ1                 = 0x67
    LIST_REQ                  = 0x68
    LIST_REQ_ACK              = 0x69
    LIST_REQ_DSK              = 0x6A
    RLY_HELLO                 = 0x70
    RLY_HELLO_ACK             = 0x71
    RLY_PORT                  = 0x72
    RLY_PORT_ACK              = 0x73
    RLY_PORT_KEY              = 0x74
    RLY_PORT_ACK_KEY          = 0x75
    RLY_BYTE_COUNT            = 0x78
    RLY_REQ                   = 0x80
    RLY_REQ_ACK               = 0x81
    RLY_TO                    = 0x82
    RLY_PKT                   = 0x83
    RLY_RDY                   = 0x84
    RLY_TO_ACK                = 0x85
    RLY_SERVER_REQ            = 0x87
    RLY_SERVER_REQ_ACK        = 0x87
    SDEV_RUN                  = 0x90
    SDEV_LGN                  = 0x91
    SDEV_LGN_ACK              = 0x91
    SDEV_LGN_CRC              = 0x92
    SDEV_LGN_ACK_CRC          = 0x92
    SDEV_REPORT               = 0x94
    CONNECT_REPORT            = 0xA0
    REPORT_REQ                = 0xA1
    REPORT                    = 0xA2
    DRW                       = 0xD0
    DRW_ACK                   = 0xD1
    PSR                       = 0xD8
    ALIVE                     = 0xE0
    ALIVE_ACK                 = 0xE1
    CLOSE                     = 0xF0
    MGM_DUMP_LOGIN_DID        = 0xF4
    MGM_DUMP_LOGIN_DID_DETAIL = 0xF5
    MGM_DUMP_LOGIN_DID_1      = 0xF6
    MGM_LOG_CONTROL           = 0xF7
    MGM_REMOTE_MANAGEMENT     = 0xF8
    REPORT_SESSION_READY      = 0xF9

    INVALID                   = 0xFF

enum P2PCmdType
    P2P_JSON_CMD              = 0x6a4
    P2P_SEND_FILE             = 0x3a98

enum P2PSubCmdType
    START_LIVE                = 0x03e8
    CLOSE_LIVE                = 0x03e9
    VIDEO_RECORD_SWITCH       = 0x03ea
    LIGHT_STATE_SWITCH        = 0x03eb
    LIGHT_STATE_GET           = 0x03ec
    LIVE_MODE_SET             = 0x03ed
    LIVE_MODE_GET             = 0x03ee

enum FileTransfer
    # Begin file transfer (sent with metadata)
    BEGIN                     = 0x00

    # File content
    DATA                      = 0x01

    # Complete file transfer (start printing)
    END                       = 0x02

    # Abort file transfer (delete file)
    ABORT                     = 0x03

    # Reply from printer
    REPLY                     = 0x80

enum FileTransferReply
    # Success
    OK                        = 0x00

    # Timeout during transfer
    ERR_TIMEOUT               = 0xfc

    # Frame type error
    ERR_FRAME_TYPE            = 0xfd

    # Checksum did not match
    ERR_WRONG_MD5             = 0xfe

    # Printer was not ready to receive
    ERR_BUSY                  = 0xff

struct Host
    pad0: zeroes<1>

    # Adress family. Set to AF_INET (2)
    afam: u8le

    # Port number
    port: u16le

    # IP address
    addr: IPv4

    pad1: zeroes<8>

struct Duid
    # duid "prefix", 7 chars + NULL terminator
    prefix: string<8>
    ## prefix: array<u8, 8>

    # device serial number
    serial: u32

    # checkcode relating to prefix+serial
    check: string<6>
    ## check: array<u8, 6>

    # padding
    pad0: zeroes<2>

struct Xzyh
    magic: magic<4, 0x585a5948>

    # Command field (P2PCmdType)
    cmd: u16le

    # Payload length
    len: u32le
    unk0: u8
    unk1: u8
    chan: u8
    sign_code: u8
    unk3: u8
    dev_type: u8
    data: bytes<field<len>>

struct Aabb
    # Signature bytes. Must be 0xAABB
    signature: magic<2, 0xAABB>

    # Frame type (file transfer control)
    frametype: FileTransfer

    # Session id
    sn: u8

    # File offset to write to
    pos: u32le

    # Length field
    len: u32le

struct Dsk
    @size = 24
    key: bytes<20>
    pad: zeroes<4>

struct Version
    @size = 3
    major: u8
    minor: u8
    patch: u8

# Base message class
struct Message
    # Signature byte. Must be 0xF1
    magic: u8

    # Packet type
    type: Type

    # Packet length
    len: u16

packet PktDrw
    # Signature byte. Must be 0xD1
    signature: magic<1, 0xD1>

    # Channel index
    chan: u8

    # Packet index
    index: u16

    # Payload
    data: tail

packet PktDrwAck
    # Signature byte. Must be 0xD1
    signature: magic<1, 0xD1>

    # Channel index
    chan: u8

    # Number of acks following
    count: u16

    # Array of acknowledged DRW packet
    acks: array<u16, field<count>>

packet PktPunchTo
    host: Host

packet PktHello
    @size = 0

packet PktLanSearch
    @size = 0

packet PktRlyHello
    @size = 0

packet PktRlyHelloAck
    @size = 0

packet PktRlyPort
    @size = 0

packet PktRlyPortAck
    @size = 0
    mark: u32
    port: u16
    pad: zeroes<2>

packet PktRlyReq
    @size = 0
    duid: Duid
    host: Host
    mark: u32

packet PktRlyReqAck
    @size = 0
    mark: u32

packet PktAlive
    @size = 0

packet PktAliveAck
    @size = 0

packet PktClose
    @size = 0

packet PktHelloAck
    host: Host

packet PktPunchPkt
    duid: Duid

packet PktP2pRdy
    duid: Duid

packet PktP2pReq
    duid: Duid
    host: Host

packet PktP2pReqAck
    mark: u32

packet PktP2pReqDsk
    duid: Duid
    host: Host
    nat_type: u8
    version: Version
    dsk: Dsk

packet PktP2pRdyAck
    duid: Duid
    host: Host
    pad: zeroes<8>

packet PktListReqDsk
    # Device id
    duid: Duid

    # Device secret key
    dsk: Dsk

packet PktListReqAck
    # Number of relays
    numr: u8

    # Padding
    pad: zeroes<3>

    # Available relay hosts
    relays: array<Host, field<numr>>

packet PktDevLgnCrc
    @crypto_type = 2

    duid: Duid
    nat_type: u8
    version: Version
    host: Host

packet PktRlyTo
    host: Host
    mark: u32

packet PktRlyPkt
    mark: u32
    duid: Duid
    unk: u32

packet PktRlyRdy
    duid: Duid

packet PktDevLgnAckCrc
    @crypto_type = 2

    pad0: zeroes<4>

packet PktSessionReady
    @size = 84
    @crypto_type = 1

    duid: Duid

    handle: i32
    max_handles: u16
    active_handles: u16
    startup_ticks: u16
    b1: u8
    b2: u8
    b3: u8
    b4: u8
    pad0: zeroes<2>
    addr_local: Host
    addr_wan:   Host
    addr_relay: Host

parser MessageType
    @type: Type

    HELLO                     : PktHello
    HELLO_ACK                 : PktHelloAck
    ## HELLO_TO                  = 0x02
    ## HELLO_TO_ACK              = 0x03
    ## QUERY_DID                 = 0x08
    ## QUERY_DID_ACK             = 0x09
    ## DEV_LGN                   = 0x10
    ## DEV_LGN_ACK               = 0x11
    DEV_LGN_CRC               : PktDevLgnCrc
    DEV_LGN_ACK_CRC           : PktDevLgnAckCrc
    ## DEV_LGN_KEY               = 0x14
    ## DEV_LGN_ACK_KEY           = 0x15
    ## DEV_LGN_DSK               = 0x16
    ## DEV_ONLINE_REQ            = 0x18
    ## DEV_ONLINE_REQ_ACK        = 0x19
    P2P_REQ                   : PktP2pReq
    P2P_REQ_ACK               : PktP2pReqAck
    P2P_REQ_DSK               : PktP2pReqDsk
    LAN_SEARCH                : PktLanSearch
    ## LAN_NOTIFY                = 0x31
    ## LAN_NOTIFY_ACK            = 0x32
    PUNCH_TO                  : PktPunchTo
    PUNCH_PKT                 : PktPunchPkt
    ## PUNCH_PKT_EX              = 0x41
    P2P_RDY                   : PktP2pRdy
    ## P2P_RDY_EX                = 0x42
    P2P_RDY_ACK               : PktP2pRdyAck
    ## RS_LGN                    = 0x60
    ## RS_LGN_ACK                = 0x61
    ## RS_LGN1                   = 0x62
    ## RS_LGN1_ACK               = 0x63
    ## LIST_REQ1                 = 0x67
    ## LIST_REQ                  = 0x68
    LIST_REQ_ACK              : PktListReqAck
    LIST_REQ_DSK              : PktListReqDsk
    RLY_HELLO                 : PktRlyHello
    RLY_HELLO_ACK             : PktRlyHelloAck
    RLY_PORT                  : PktRlyPort
    RLY_PORT_ACK              : PktRlyPortAck
    ## RLY_PORT_KEY              = 0x74
    ## RLY_PORT_ACK_KEY          = 0x75
    ## RLY_BYTE_COUNT            = 0x78
    RLY_REQ                   : PktRlyReq
    RLY_REQ_ACK               : PktRlyReqAck
    RLY_TO                    : PktRlyTo
    RLY_PKT                   : PktRlyPkt
    RLY_RDY                   : PktRlyRdy
    ## RLY_TO_ACK                = 0x85
    ## RLY_SERVER_REQ            = 0x87
    ## RLY_SERVER_REQ_ACK        = 0x87
    ## SDEV_RUN                  = 0x90
    ## SDEV_LGN                  = 0x91
    ## SDEV_LGN_ACK              = 0x91
    ## SDEV_LGN_CRC              = 0x92
    ## SDEV_LGN_ACK_CRC          = 0x92
    ## SDEV_REPORT               = 0x94
    ## CONNECT_REPORT            = 0xA0
    ## REPORT_REQ                = 0xA1
    ## REPORT                    = 0xA2
    DRW                       : PktDrw
    DRW_ACK                   : PktDrwAck
    ## PSR                       = 0xD8
    ALIVE                     : PktAlive
    ALIVE_ACK                 : PktAliveAck
    CLOSE                     : PktClose
    ## MGM_DUMP_LOGIN_DID        = 0xF4
    ## MGM_DUMP_LOGIN_DID_DETAIL = 0xF5
    ## MGM_DUMP_LOGIN_DID_1      = 0xF6
    ## MGM_LOG_CONTROL           = 0xF7
    ## MGM_REMOTE_MANAGEMENT     = 0xF8
    REPORT_SESSION_READY      : PktSessionReady
